import * as React from 'react';
import Head from 'next/head';
import Posts from '../../../components/Blog/Posts/Posts';
import Layout from '../../../components/Layout/Layout';
import { IPageProps } from '../../_app';
import IPost from '../../../helper/types/blog/Post';
import ICategory from '../../../helper/types/blog/Category';
import IPopularPost from '../../../helper/types/blog/PopularPost';

interface IProps extends IPageProps {
  status: boolean;
  items: IPost[];
  items_per_page: number;
  current_page: number;
  total_items: number;
  categories: ICategory[];
  popular_posts: IPopularPost[];
  archives: {
    date: number;
    posts: number;
  }[];
  category: ICategory;
}

class Index extends React.Component<IProps> {
  render() {
    const breedcrumb = [this.props.category];
    const getBreedcrumb = (targetCategory) => {
      const parentId = targetCategory.parent;

      if (parentId) {
        const parent = this.props.categories.find(
          (category) => category.id === parentId
        );
        if (parent.parent) {
          breedcrumb.push(parent);
          getBreedcrumb(parent);
        } else {
          breedcrumb.push(parent);
        }
      }
    };
    getBreedcrumb(this.props.category);

    return (
      <div dir="rtl" id="blog-category">
        <Head>
          <title>جی بلاگ | {this.props.category.title}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Layout
          postsForFooter={this.props.postsForFooter}
          domainsForNavbar={this.props.domainsForNavbar}
          licensesForNavbar={this.props.licensesForNavbar}
        >
          <Posts
            posts={this.props.items}
            categories={this.props.categories}
            popularPosts={this.props.popular_posts}
            currentPage={this.props.current_page}
            totalItems={this.props.total_items}
            itemsPerPage={this.props.items_per_page}
            topNavTitle={this.props.category.title}
            param={{
              category: this.props.category,
              breedcrumb: breedcrumb.reverse(),
            }}
          />
        </Layout>
      </div>
    );
  }
}

export async function getServerSideProps(context) {
  const locale = context.locale;
  const slug = context.query.slug;
  const page = context.query.page ? context.query.page : 1;
  const ipp = context.query.ipp ? context.query.ipp : 10;

  // 404
  if (locale !== 'fa') {
    return {
      notFound: true,
    };
  }

  const categoryPath = slug.reduce((a, c) => {
    return (a = a + `/${c}`);
  }, '');

  const respone = await fetch(
    `${process.env.SCHEMA}://${process.env.DOMAIN}/${locale}/blog/category${categoryPath}?page=${page}&ipp=${ipp}&ajax=1`
  );
  const data = await respone.json();

  // // 404
  if (!data.status) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...data,
    },
  };
}

export default Index;
