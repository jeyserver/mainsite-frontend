import * as React from 'react';
import Head from 'next/head';
import Posts from '../../components/Blog/Posts/Posts';
import Layout from '../../components/Layout/Layout';
import { IPageProps } from './../_app';
import IPost from '../../helper/types/blog/Post';
import ICategory from '../../helper/types/blog/Category';
import IPopularPost from '../../helper/types/blog/PopularPost';

interface IProps extends IPageProps {
  status: boolean;
  items: IPost[];
  items_per_page: number;
  current_page: number;
  total_items: number;
  categories: ICategory[];
  popular_posts: IPopularPost[];
  archives: {
    date: number;
    posts: number;
  }[];
  word: string;
}

class Index extends React.Component<IProps> {
  render() {
    return (
      <div dir="rtl" id="blog-category">
        <Head>
          <title>جی بلاگ | جستجو | نتایج جستجوی {this.props.word}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Layout
          postsForFooter={this.props.postsForFooter}
          domainsForNavbar={this.props.domainsForNavbar}
          licensesForNavbar={this.props.licensesForNavbar}
        >
          <Posts
            posts={this.props.items}
            categories={this.props.categories}
            popularPosts={this.props.popular_posts}
            currentPage={this.props.current_page}
            totalItems={this.props.total_items}
            itemsPerPage={this.props.items_per_page}
            topNavTitle={`نتایج جستجوی "${this.props.word}"`}
            param={{
              search: `نتایج جستجوی "${this.props.word}"`,
            }}
          />
        </Layout>
      </div>
    );
  }
}

export async function getServerSideProps(context) {
  const locale = context.locale;
  const word = context.query.word;
  const page = context.query.page ? context.query.page : 1;
  const ipp = context.query.ipp ? context.query.ipp : 10;

  // 404
  if (locale !== 'fa' || !word) {
    return {
      notFound: true,
    };
  }

  const respone = await fetch(
    `${process.env.SCHEMA}://${process.env.DOMAIN}/${locale}/blog/search?word=${word}&page=${page}&ipp=${ipp}&ajax=1`
  );
  const data = await respone.json();

  // 404
  if (!data.status) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...data,
    },
  };
}

export default Index;
