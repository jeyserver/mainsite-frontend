import * as React from 'react';
import Head from 'next/head';
import SharedHosting from '../../../components/HostsPricing/SharedHosting/SharedHosting';
import Layout from '../../../components/Layout/Layout';
import { IPageProps } from '../../_app';
import { IHostPlan } from '../../../helper/types/products/Host/plan';

interface IProps extends IPageProps {
  status: boolean;
  plans: IHostPlan[];
}

interface IState {
  appIsScrolling: boolean;
}

class Index extends React.Component<IProps, IState> {
  constructor(props: IProps) {
    super(props);
    this.state = {
      appIsScrolling: false,
    };
  }

  appIsScrollingTimeout = null;

  switchAppIsScrolling() {
    clearTimeout(this.appIsScrollingTimeout);

    this.setState({ appIsScrolling: true });

    this.appIsScrollingTimeout = setTimeout(() => {
      this.setState({ appIsScrolling: false });
    }, 1000);
  }

  componentWillUnmount() {
    clearTimeout(this.appIsScrollingTimeout);
  }
  render() {
    return (
      <div dir="rtl">
        <Head>
          <title>هاستینگ | لینوکس | معمولی</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Layout
          header={this.props.header}
          footer={this.props.footer}
          appIsScrolling={this.state.appIsScrolling}
        >
          <SharedHosting
            sharedHosts={this.props.plans}
            page="linux_standard"
            appIsScrolling={this.state.appIsScrolling}
            switchAppIsScrolling={() => this.switchAppIsScrolling()}
          />
        </Layout>
      </div>
    );
  }
}

export async function getServerSideProps(context) {
  const locale = context.locale;

  if (locale !== 'fa') {
    return {
      notFound: true,
    };
  }

  const respone = await fetch(
    `${process.env.SITE_URL}/${locale}/hosting/linux/standard?ajax=1`
  );
  const data = await respone.json();

  return {
    props: {
      ...data,
    },
  };
}

export default Index;
