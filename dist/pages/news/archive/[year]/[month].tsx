import * as React from 'react';
import Head from 'next/head';
import News from '../../../../components/News/News';
import moment from 'jalali-moment';
import Layout from '../../../../components/Layout/Layout';
import { IPageProps } from '../../../_app';
import IPost from '../../../../helper/types/news/Post';
import IPopularPost from '../../../../helper/types/news/PopularPost';

interface IProps extends IPageProps {
  status: boolean;
  items: IPost[];
  items_per_page: number;
  current_page: number;
  total_items: number;
  popular_posts: IPopularPost[];
  archives: { [T: string]: number };
  date: { year: number; month: number };
}

class Index extends React.Component<IProps> {
  render() {
    const date = moment
      .from(`${this.props.date.year}/${this.props.date.month}`, 'fa', 'YYYY/MM')
      .locale('fa')
      .format('MMM YYYY');

    return (
      <div dir="rtl">
        <Head>
          <title>آرشیو اخبار {date}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Layout header={this.props.header} footer={this.props.footer}>
          <News
            headerTitle={`آرشیو اخبار ${date}`}
            items={this.props.items}
            itemsPerPage={this.props.items_per_page}
            currentPage={this.props.current_page}
            totalItems={this.props.total_items}
            popularPosts={this.props.popular_posts}
            archives={this.props.archives}
          />
        </Layout>
      </div>
    );
  }
}

export async function getServerSideProps(context) {
  const locale = context.locale;
  const month = context.query.month;
  const year = context.query.year;
  const curPage = context.query.page ? context.query.page : 1;
  const ipp = context.query.ipp ? context.query.ipp : 10;

  if (locale !== 'fa') {
    return {
      notFound: true,
    };
  }

  const respone = await fetch(
    `${process.env.SITE_URL}/${locale}/news/archive/${year}/${month}?ajax=1&page=${curPage}&ipp=${ipp}`
  );
  const data = await respone.json();

  // 404
  if (!data.status) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...data,
      date: { year, month },
    },
  };
}

export default Index;
